Use the same AST for types and values. Process them with a single function. Can restrict grammar when types are known in advance. Pass in what is allowed: values, types or even kinds

Replace Types::Variable with type parameters in some way.
	Replace TypeParams with Types::Variable before type inference.
	Replace Types::Variable with TypeParams after. Ensure that none of the user declared TypeParams did unify with anything.
	
	How to do this with nested type parameters?
	
Sort typeclass contraints by the address of the typeclass to make it easier to find duplicates.

In the string table implementation:
	When adding a new entry, set it's last used module to the one currently being parsed. If it already were current we don't have to add the symbol to the current module's reference list. Assumes only one module is parsed at a time.
		This trick doesn't work as well with multiple threads. Make the fields atomic and fall back to a module local hashtable if it isn't set.
	
For typeclass constraints
	If the callee finds an instance, it passes it on to the code generation
	If the caller finds an instance, it passes it on to the code generation
	
	Pass on the scope of the constrant / where it was resolved.
		Pass instances instead to reduce duplication of generated functions?
	
	The results differs only if the callee and caller are in different scopes.
	
	You can force checks in the caller by doing say:
		hello(c String) where Typeclass[String]
		
		Not useful, we would not be able to use that typeclass instance for anything
		
	The code generation picks which typeclass instance to use based on dictionaries passed in. Compare to Haskell's runtime dictionaries
		Structs, variables and functions needs to know which typeclass instances to use
			Ensure fields use the same typeclass instances as structs
		Store typeclass constraints and which typeclass constraints or typeclass instance they where instanced to along with each reference
		Create a correction map to use when modifiying constraints
		
	How to deal with typeclass instances with typeclass constraints themselves?

Allow construction of non-copyable types by not requiring Copy typeclass on the initial assignemnt
	.var = Type("hello")
	var = Type("another") # not allowed if Type doesn't implement Copy
	
	.var2 = var # needs to handle this case. Make plain references require Copy?
		Does not allowing plain references handle all the cases when types might be copied?
		If so, 'var = Type("another")' could be allowed since it's not really a copy
		Does it handle return values? - No, return Type("Hm") would be allowed. It also doesn't generate an error when defining functions.
			Solved by making return and arguments of functions require Copy
			Handles the case of func(Type("hm")) too
			
			Return values doesn't have to be copyable.
			
			func()
				return Type("hello")
			.var = func()
			
			The object is never copied.
			
	Which values needs to have a Copyable type?
		Arguments passed to function applications (Callable typeclass can require this)
		Plain references to variables
			When the * or & operators are used this is not required
		The result of the * operator must be copyable, except when it's on the left hand side of assignment
		The result of the [] operator have to be copyable, except when it's on the left hand side of assignment
		
	Which values needs to have a Sizable type (not a opaque type)?
		Literals (already have a typeclass which can require Sizable)
		Variables/fields (would this be handled by the Constructable typeclass?)
		
		Constructor results (Constructable typeclass would require Sizable)
			Actually only the () operator which creates objects on the stack requires Sizable.
		
		The result of the * operator
		Function return values
		
	Copyable implies Sizable?
		
		Implement Copyable and Sizable by an integer on type variables.
			0 - Nothing
			1 - Sizable
			2 - Copyable and sizable
			
		On unification
			The highest value between two type variables are used.
			Checks that fixed types implements the right typeclasses
			
		Turn them into proper typeclass constraint when type inference is done
		
	Handle errors about Sizable and Copyable at the code generation stage?
		- No mess with typeclasses (so it's more efficient)
		- No need to infer typeclass constraint as much
		- Less friendly error messages
		
		Yes

	Do this not with type classes, but with flags on types
	Type parameters will need the same handling as type variables
	
	Add a level lower than Nothing for use with union type data constructors which can only be passed on to other type constructors?
		Investigate, but might be complex and not worth it
		
Add an Types::Error class which unifies and goes through type inference without causing further errors.

Have a stack of variables and free them when generating a return?
Make new_var return a new variable inside a block and delete it before returning

Move the type assignment of convert.var to the new_var call, make convert.var a simple string?
	