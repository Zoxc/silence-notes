[X] Union/record types
[X] Non-nullable pointers.
Nullable pointer as a set type? Set types probably too complicated.
Assert integrated with the type system? Not sure if this is a nice way to force non-null pointers.
GC-support facilitated by reflection?
Compile-time string, tuples/arrays reflection?
Macros as compile-time strings
[X] Classes

Member pointers syntactic sugar for function pointers.
	Function pointer fields can act like assignable methods

operator [] returns a pointer to the object? May return null? operator []= allows you to set new fields?
Namespaces. One per file? No - you'd want to have each class in it's own file. Advanced imports? 
[X] Enum with records. Size different for each value? Immutable by default.
[X] Support tagged pointers by encoding it in a enum. Null pointers is a special case of this.
Local variables cannot shadow other local variables
this and super act like regular variables
Global string mixins
[X] Function string mixins
D nested structs, similar to closures?
Immutable pointers
Implict type class for each operator?
Allow global constants without types
Operators require the same types on both sides? (simplifies type inference) Magic casting operation? Require conversion or use type families?
Functions on integers?
Keyword to force compile time evalution of expressions?

[N] C++ references. Passing structs by values is not supposed to have any side effects so const StructType will be an efficient way of passing by value (breaks if the struct is modified over time). Pointers to be used if you want to modify anything.
	- Define that arguments must not be modified during the duration of the call. Pass objects by pointers when possible. Dynamic ABI allows that. Address of & value forces a copy
		Do this for local variables passed only? Probably
		Caller decides when to pass by pointer? ABI should always take a pointer, caller copies if needed
		Force copies of function arguments also passed in a closure?
		How to deal with aliasing issues? Define it to be an error if you pass a pointer that can be modified to a function with the same object passed as a value? -> http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2013/n3538.html
	[N] L and R-value references? Still no
	
Template parameter immutable lists
volatile, immutable data?
Only allow bool in ifs, operators, etc. (require pointers to be compared with nil) to simplify type inference for bools?
D like scoped exception handlers?
D like lazy argument evalution?
Integer overflow undefined with additions/subtractions?
How to do placement new? Would it require overloads? Use functions for new/delete
Pure/compile time function attributes?
Globals thread local by default
Chained Comparison Operators: 1 < x < 2

How to specify templates types with type contraints and specialization?

unit as the unit type, sizeof(unit) == 0, so storing it and dereferencing pointers are noops. You can get the instance by unit() {} Equal to the typle type (), instance ()
bottom as the bottom type, the type of return <expr>, raise <expr> and functions never returning.

var1: auto
var2: auto = 3

auto as special keyword for a type where you want type inference. You can nest it, like (arg: auto): auto

Have both bitwise and logical operations with different precedences

~ Concatentation operator, works for strings and fixed size arrays. make_literal passed an array of chars instead of using tuples.
	- [1, 2] slicing on arrays to go with it
	- overloading by arity

read-only, write-only, in, out, volatile

Inf:
C
C++
Haskell
Scala
Ceylon
Rust
D

Implict conversion by subset/superset types/ convertable to-from types.
	
Use a construct keyword in constructors for initializing overridable fields? Yes, makes things cleaner. Use the same keyword for constructors.


Type class instances in struct works like mixins, makes all type class members visible in the struct
	struct StringList
	{
		instance Collection[String]
	}
	
Select which type classes to automatically derive:
	struct A
		deriving Eq, Ord, Show
	{
	}

Allow use of type classes instead of types directly:
	map[List: GenericCollection](list: List[E], func: Callable[E])
	{
		result: List[func.Result]
		collection_view: Collection = cast result # View it as a regular Collection
		
		for(element: list)
			result.add(func(element))
		
		return result
	}
	
Scopes with type parameters:
	# Acts like singleton objects?
	scope GLApp[GL: GLInterfaceTypeClass]
	{
		run() { GL.Render() }
	}
	
	GLApp[OpenGLESLibrary].run() # Pick library at compile time
	
Add tuples:
	Type function to map bools in tuples to ints
	
	class TypeMap T
	{
		type Result
	}
	
	instance TypeMap Bool
	{
		type Result = Int
	}
	
	instance TypeMap T
	{
		type Result = T
	}
	
	class TupleMap T
	{
		type Result
	}
	
	instance TupleMap EmptyTuple
	{
		type Result = EmptyTuple
	}
	
	instance TupleMap TupleCell[L, R]
	{
		type Result = TupleCell[TypeMap[L], TupleMap[R].Result]
	}
	
	struct EmptyTuple {}
	struct TupleCell[L, R: Tuple]
	{
		f: L
		fs: R
	}
	
	class Tuple[T]
	instance Tuple EmptyTuple
	instance Tuple TupleCell[L, R: Tuple]
	
	class AssignableTuple[T: Assignable]
	instance AssignableTuple EmptyTuple
	instance AssignableTuple TupleCell[L: Assignable, R: AssignableTuple]
	
	
	() # Sugar EmptyTuple
	(a: uint, b: bool), (uint, bool) # Sugar for TupleCell[uint, TupleCell[bool, EmptyTuple]]
	
	(uint, bool, int) # Sugar for TupleCell[uint, TupleCell[bool, TupleCell[int, EmptyTuple]]]
	
	Have a built in type function which maps (), a, (a, b...) to EmptyTuple, TupleCell[a, EmptyTuple], TupleCell[a, TupleCell[b, ...]] and back? Deals with the tuple with one element case nicely
		Also allows tuples to be implementent efficiently
	
Support types which takes 0 bytes as storage:
	for example: a field pointer to a static field, empty structs, unit type

Add a newtype which inherites all the type class instances of the old type:
		Read: [Ken96] AJ Kennedy. Type inference and equational theories. LIX	RR/96/09, Ecole Polytechnique, September 1996. - unit-inference-2011-06-24-techreport.pdf
	Meters = newtype Int
	
	a: Meters = 1 + 2 * 2
	b: Int = a # Type error

Phantom types? http://www.haskell.org/haskellwiki/Phantom_type

Don't allow polymorphic recursion / infinite types

Closures have type () -> ():
	destruct :: (a) -> () can be both a closure (field) and a method when in a type class? When it a struct it depends on whether or not it has a body.
	How to do function and closure pointers?
		closure pointers: *(a) -> int
		function pointer: (a) *> b
	value.method wouldn't add the implict this parameter, it should be stored in the closure type
	&function and &T.method wouldn't return a pointer to their types, but a more complex operation returning function pointers, which is a bit weird

	a *> b nullable: a ^> b
	a => b
	Need a new function pointer type!
		
Use whitespace for indentation? Yes
	Generate an error for empty blocks?
		if something
			# no block here!
		ok

Have empty blocks have the type Nothing a => a. unit/() and nil are instances of that typeclass. Defaults to ()

Have trailing if, like Ruby

Atomic memory transactions?

Construct any object with {} syntax, calls the 'literal' constructor with the specified arguments:
	# Needs a way to allow lists of things on runtime
		Use [1, 2, 3] for homogeneous lists?
	
	a: Struct = {1, "hello"}
	
	Results in an application of Literal.construct passed a tuple.
	
	class Literal[Tuple]
		construct([Tuple])
	
	Use a type class for destructing pattern matching too?
	
Use [Hello] as attribute syntax?
	[Import 'printf'] print_str :: *str -> ()
	
Rust stealing:
	'match' keyword instead of 'case'
	do like syntax?
	let (a, b) = (1, 2) # Pattern match variable declarations!
	
	self is a reference to an object, not a pointer?
	
	Call Assignable/Movable Copyable?
	
	Const as type class? Investigate?
	
	Allow all types to be struct-like, even primitives and enums?
	
	Closures that can only live on the stack? Stack closures references variables while managed closures copies values
		Nah, use a keyword for when you want a closure literal to go on the stack when no heap is available. How to handle method field accesses?
			static a => return 2
			var = static obj.method
			
			Probably not needed. You may want it when you want to use different heap functions after bringing up a heap
			
	a -> b is managed.

What would the syntax of a operator to get the enclosing structure of a type, given a field pointer would look like?
	Can we use a function?
	
	container_of[T, F] (obj :: *F, field :: F in T)
		return (obj as uint - field as uint) as *T
	
Allow field pointers to static fiends, another type with 0 bit storage! - Won't work

Call type classes traits like Rust and Scala?

Range compare:
	1<x<3
	4>=x>3
	
Python else for loops?
	for n in range(2, 10):
		for x in range(2, n):
			if n % x == 0:
				print n, 'equals', x, '*', n/x
				break
		else:
			# loop fell through without finding a factor
			print n, 'is a prime number'

Grammar binding of [] and ' ' (function application):
	'a func 2'
	'a func[Type] 2' # Can't do this :( Need a new syntax
	'func[Type] 2'
	'func 2[0]'
	'func ()[0]'
	'func (2)[0]'
	'func (2, 3)[0]'
	
	'a (func 2)'
	'a (func[Type] 2)'
	'(func[Type]) 2'
	'(func 2)[0]'
	'(func ())[0]'
	'(func (2))[0]'
	'(func (2, 3))[0]'
	
	Still allow func 1 syntax after new parameter functionality? Nice for operator like functions like delete and cast. Don't allow () as the parameter
	
How to do function call forwarding with type class constraints?

'new' function at compile time allocates storage in the data section if it has references at link-time

Syntax for values in type parameters?
	struct Test[size :: uint, name :: string]
		
	Trick to pass value as a type:
		class Value T, V
		{
			static value :: *V
		}
		
		struct SomeValue V
		{
			static value :: *V = <value>
			
			instance Value[V]
		}
		
		struct NoValue V
		{
			static value :: *V = nil
			
			instance Value[V]
		}
		
		struct ParameterInfo[Type, Optional: Value[Type]]

New function parameters:
	class List[T]
	
	# Unit type indicates the end of a list
	instance List[()] 
	
	struct Node[Type, Next: List]
		instance List
	
	# An argument list
	Node[int, Node[bool, ()]] 
	
	# Compiler creates an anonymous type with an instance of Named for named parameters
	class Named[T] 
		type Type
		static
			# Name of this parameter 
			name :: string 
			
			# A pointer to the default value to pass, if not specified at call location.
			# 'nil' means no default value is provided
			default_value :: *Type 
	
	# Named parameters get their own node type in the List
	struct NamedNode[Value: Named, Next: List] 
		instance List
	
	# The function type constructor (->) takes a type which is an instance of List
	# These two types are the same:
	Node[int, Node[bool, ()]] -> int
	(int, bool) -> int
	
	# No syntatic sugar to create types with NamedNodes other than function definitions
	# Only applying function definitions gives you access to the named arguments
	# Using functions as first class values replaces NamedNode nodes with Node.
	
	test(a: int) -> unit
	# Internal type: NamedNode[test_Arg_A, ()] -> unit
	# test_Arg_A is the anonymous type with an instance of Named
	
	# Named parameter invocation
	test(a: 2)
	
	forwarder([args]: Args) -> unit
	# Args must be an instance of List
	# Only a variadic argument allowed, named arguments may clash with more arguments. Allow a way to use unnamed arguments in addition?
	
	# Args can be inferred
	forwarder([args])
		return test([args])
	
	# Forwarded named parameter invocation
	forwarder(a: 2)
	
	Make tuple types instances of Arg.List? Yes, drop Arg.Node
	
	New new/delete operators to match:
		class Constructor[T]
			type Constructed
			type Args Tuple
			
			shared construct(obj *Constructed, args Args) -> unit
		
		class Destructable # All types have instance of this
			destruct() -> unit
		
		struct A
			field int
			inline Struct
			
			construct # A Constructor type class instance for A is created
				field <- 1 
			
			construct named(i) # named is a dummy type that constructs A instances, a Constructor type class instance for it is created where the Constructed type is A
				inline <- Struct.named_constructor(1, 2)
		
		new[T Constructor = R, Args]([args T.Args]) -> *R where R = T.Constructed
			.obj = ptr_cast C.malloc(sizeof R)
			T.construct(obj, args)
			return obj
		
		delete[T Destructable](obj *T)
			(*obj).destruct()
			C.free(obj)

	Callable:
		class Callable[T] // Builtin, Inferrable by operator ()
		{
			type Result
			type Args
			
			apply(args Args): Result
		}
		
Use :: for type specifing and : where data constructor are allowed? This means :: in fields and function parameters and : in local variable declarations
	
Named parameter invocation for type functions too?

Type class functions?
	class cast[To](from) -> To
	instance cast[T] -> T
	
	Would make syntax for copy and cast class instances nicer
	
Write a function which does something to all arguments of a tuple where all types are instances of some type class

Use func() = value syntax, same as func() { return value }

Allow implict conversions when types are known and require explicit conversion with generic types

cast function:
	class Castable[From, To]
		static cast(val: From) -> To
		
	instance[T] Castable[T, T]
		static cast(val: T) -> T
			return val
			
What happens if you get the address of a field in a type class which is implemented by a property?
	Let's have properties in type classes which you can't get the address of? Also would allow read and write only properties
	
const as immutable, view as const?

How to deal with read-only, write-only, volatile?, immutable in type inference?
	Only matter for pointers when passed by value? Also matters for assigning variables/indexed assignment
		Nah, doesn't matter for function parameters and return values, or does it?
		
	Don't allow pattern matching on them, share generated code and allow you to cast from/to safely
	
	array: *T in generic containters? how to handle const/view? const/view methods can't add, but mutable methods can (constructors are mutable)
	
	Infer view flag on self and pointer argumets?
	
	Allow const/immutable in pointers/methods?
	
Drop write-only, volatile if complex for the type system

Size parameter on delete function -> http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2013/n3536.html

immutable + read-only = immutable

Have a function for volatile writes/reads?
	volatile[T](in: *T, out: *T) -> ()
	
Store a name for Types::Variable

Use another syntax for contraints on type parameters than value parameters?
	test[NumType => Num, ValueParam: Num, AnyValue: AnyValueType, AnyValueType]()
	ValueParam, AnyValue are values
	NumType, AnyValueType are types
	
Use :: for value type arguments?
	function[Value :: int, Value :: T, T: Callable]()
	
Undefined keyword
	a: *Struct = undefined # Create a variable with a non-nullable pointer
	
	Is polymorphic so you can create constructors which creates uninitialized values which can have a destructor called on them?
	
	Use the construct keyword to create a value later instead?
	
Syntax to create templare parameter in function parameter:
	static cast(val: ~From) -> ~To
	
	Does type inference handle the useful cases here? Probably
	
Variadic length arrays in struct?
	struct U
		size: int
		hm: [int x size]
		hm2: [bool x size * 2]
		
Move semantics by generating specialized functions when temporary rvalues are passed as arguments
	Analyze function first to see if it's worth doing
	Should handle the "str" + obj case
	Never specialize for non-complex arguments
	move function/keyword which returns a temporary rvalue reference and fails with a compile error if that doesn't work -- would be fragile/depend don the level of optimization done
	
Make comma a tuple constructor:
	bool, int a #Tuple variable
	a = true, 2
	
	Types:
		bool, int -> string
		
	var a = 3, b = "hi"
	 would mean var a = (3, b = "hi")
	 only allow operators higher than comma for variable initializers?
	
		
Shorter function type alternatives?
	(-> string) # () -> string
	(->) # () -> ()
	
	Only allow ->, *> inside parentheses?
	
Syntax for function pointers with other calling conventions:
	[cdecl]() -> b
	
	Use type functions?
		cdecl[() -> b] :: CDeclFunc[() -> b]
	
Syntax for pointers to other memory spaces:
	[fs]*char
	
	Ptr[*Char, FsSpace]
	FsPtr[*Char]
	
	Use type functions?
		x86.fs_ptr[char] :: FsPtr[char]
		
	Let call/apply work as index for types?
		x86.fs_ptr char :: FsPtr[char]
		
Use .attr as syntax for attributes for everything?
	var: .fs *char
	func: .cdecl *char *> int
	
	.cdecl hello() -> uint32
		return 1
	
Lambda syntax:
	\a. a * 2
	\a, b int. a * b
	
	\a -> a * 2
	\a, b int -> a * b

	|a| a * 2
	|a, b int| a * b
	
Borrowable types:
	func[T}(param &T) means
		func[T](param T) where Borrowable[T]
		that param has type *Borrowable[T].Result inside the function
		the function applies borrow to the variable passed in to get the value used inside
		param has type T outside
		
	implement Borrowable
	
	What about & in nested types like func(param RefCount[&T])?

	Ptr[], CustomRefCount[], OwningPtr[] all implement Borrowable
	
	Borrowable typeclass is ensure by the compiler to be valid (that is, it won't escape)
	
	class Borrowable T
		type Result
		borrow() -> *Result
	
	Force type *T?
	
	Can this be mixed nicely with a OwningPtr?
	
	Perhaps not use a borrow typeclass but metadata in function definition? Still allow types to implement a borrow function in a typeclass though.
	
	How to deal with function types?
	
	^-- probably doesn't work and requires an own type
	
Opaque types with attribute?
	:opaque type COpaqueType
	.opaque type COpaqueType
	@opaque type COpaqueType
	[opaque] type COpaqueType
	
Replace struct keyword with data?
	Most things are a struct anyway
	
	.opaque data COpaqueType
	
	What to do with enums?
	
Have *[type] be a custom wrapper type PtrArray[type] which implements the [] operator and constructors taking sizes to allocate
	~ as syntax?
		~int
		~*bool

	Construct:
	.var = (~int)(32)
		Should use the 'new' function
			new[~int](32)
	
Syntaxes for ptr array wrapper types and fixed size arrays?		
	Ptr * int
	Array * int 
	
	Array Int
	
	int * 3
	3 * int
	
	.var int * 3 = [2, 5, 6]
	
How to deal with automatically dereferencing pointers for * and [] operators?
	func(obj Show) # Can't pass a pointer to a showable 'obj' here
		obj.show()
	
	Be more struct and only do it if we know it's a pointer type?
		Make *obj force type of obj to have an Indirect typeclass.	
		
Typeclass views
	.var Collection[char] = string
	
	Have 'var' keep it's type variable on unification. Keep a list of type variable and type pairs to actually unify after resolving fields, but before context reduction
		
Copy operator and destructor not suitable as typeclasses since all types would provide an instance for it.
		
Typeclass choices
	Do as much context reduction as possible with the type class instances in scope
		Only generate an error on ground types
		
	Allow typeclass instances to overlap only with other instances in it's module
	
Semantics of assignment operator
	<lhs> = <rhs>
		eval(out temp , rhs)
		destroy(lhs)
		copy(out lhs, temp)
	
	Compiler is allowed to optimize it to:
		destroy(lhs)
		eval(out lhs, rhs)
		
		If it can show that lhs does not occur in rhs.
	
	It's also allowed to optimize it to:
		eval(out temp, rhs)
		destroy(lhs)
		memcpy(out lhs, temp)
		move_fixup(lhs)
		
		If the type implements a move operator.
		
	<lhs> += <rhs>
		copy(out temp1, lhs)
		destroy(lhs)
		eval(out temp2, rhs)
		add(out lhs, temp1, temp2)
	
	Compiler is allowed to optimize it to:
		memcpy(out temp1, lhs)
		move_fixup(temp1)
		eval(out temp2, rhs)
		add(out lhs, temp1, temp2)
		
		If the type implements a move operator.
		
	Another way to avoid copies would be to create another copy of the variable when assigning:
		Turn:
			m = 2
			m += 1
		
		Into:
			m1 = 2
			m2 = m1 + 1
			
		Only works when m must not have a fixed location
		Doesn't play well with loops
		
	Require all types to be both copyable and movable?
		Infer both operator by default
		
	Some of the optimizations are invalidated by exceptions
	
Add explicit reference types for structs/unions.
	Struct doesn't need to implement move/copy operations since those would only copy it's reference.
	Unions can allocate storage per-case only
	Opaque structs would be reference types
	
	Quite ugly and adds special cases for references/pointers
	
	Steal a page from D and have require that non-reference don't refer to themselves?
		Yes, simplifies code generation!
		
	How does this impact constructors, new/delete?
	
	No, track which types are opaque, sizable and copyable instead
	
RefCount wrapper:
	class Constructor T
		type Constructed
		type Args Tuple
		
		shared size uint
		
		shared construct(obj *Constructed, args Args) -> unit
		
	data ref case Maybe T
		when Just
			field T
		when Nothing
		
	instance[T] Constructor Just[T]
		type Constructed = Maybe T
		type Args = Cell[T, ()]
		size()
			return sizeof(T)
			
	data RefC T, A Allocator
		data Header
			refs uint
			alloc_ref A.Ref
			
		ref *Header
		
	class RefType T, A Allocator
		type Contained
		type Header
		shared construct(obj *Header, alloc_ref A.Ref)
	
	instance[T, A] RefType *T, A
		type Contained = T
		type Header = unit
		shared construct(obj *unit, alloc_ref A.Ref)
	
	instance[T, A] RefType RefC[T, A], A
		type Contained = T
		type Header = RefC[T, A].Header
		shared construct(obj *Header, alloc_ref A.Ref)
			Constructor[Header].construct(obj, (0, alloc_ref))
	
	new[T Constructor, Result, Args]([args T.Args]) -> Result where R = T.Constructed, RT = RefType[Result, StdAlloc]
		.obj = ptr_cast C.malloc(sizeof RT.Header + T.size)
		RT.construct(obj, StdAlloc.ref())
		.result = ptr_cast ptr_inc(obj, 1)
		T.construct(obj, args)
		return obj
	
	delete[Input](obj Input) where RT = RefType[Input, StdAlloc], T = RT.Contained, RefDestructable[Input]
		(*obj).destruct()
		C.free(obj)
		
	Use new/delete for pointers only, and add a new_ref for more advanced things which won't need delete?

Use a separate syntax for types and values but allow type AST passed in type parameters to be able to evaluate to values as much as possible?
	
Use a ref-count wrapper class for function types?
	Explicit construction and destruction required otherwise?
	
Circular dependency
	struct Unit
	
	struct Cell Val, Rest Tuple
		val Val
		rest Rest
		
	class Tuple T

	instance Tuple Unit

	instance[Val, Rest] Tuple Cell[Val, Rest]
	
	We get an recursion error here when trying to find the type of Cell.
	It gets a Tuple[Rest] constraint. During context reduction it tries to resolve this constraint.
	It evaluates all the instances. The second one requires the type of TypeCell to be known and
	we have a circular dependency.
	
	Possible solutions:
		- Don't try to find an instance of Tuple in Cell. The programmer have marked that to be a typeclass so it's unlikely an instance is available.
		- Do the same as the first solution, only require that the programmer explicitly marks Tuple in Cell with a keyword.


Allow construction of non-copyable types by not requiring Copy typeclass on the initial assignemnt
	Do this not with type classes, but with flags on types
	Type parameters will need the same handling as type variables
	
struct RegCounted T
	How does this work with opaque types with constructors?
	
	Needs to add a refcount field to the types
		Do this by wrapping the Constructor typeclass increasing size allocated?
		
Implement size_of and type_of as builtins?
	size_of[T Sizable]() -> uint
	
	struct type_of[val :: type, type]
		Forces val to be executed, so no.

Have DefConstructor implemented for Vector<T, Stdalloc>, or more generally for any allocator without state

Separate grammar for types and expressions 
	use () for specialization for types?
		allow : for specialization in types too to avoid confusion?
		frees [] for fixed size arrays
	
	specialization syntax for expression:
		.a *Maybe(Int) = new:Just 3
		
	keyword/syntax for converting a value to type?
		Type(`Pair(1, 2))
		
Tuple field reference syntax?
	a = (1, true)
	a.0 :: int
	a.1 :: bool
	
In constructors, fields appearing in lvalues are assumed initialized.
Every other field gets constructed with the default values.
All fields are assumed initialized if 'self' appears in an lvalue

A implicit constructor for structs is generated when all constraints of the form:
		Defaultable[field_0]
		Defaultable[field_1]
		...
		Defaultable[field_n]
	reduces without an error
	
Two Index operator typeclasses?
	One for assignment and one for reading?
	
Don't allow implict generalization, require explicit type parameters?

Allow 3 different modes of typeclasses
	Instances must be defined in the same module as the typeclass (required for Tuple)
	Instances must be defined in the same module as a type parameter (useful for Defaultable and Constructor)
	Instances can be defined anywhere
	
Make ? into a binary operator? (http://mortoray.com/2013/07/14/rejuvenating-the-ternary-conditional-with-optionals/ ) - http://leaflang.org
	
http://www.codeproject.com/Articles/192825/Bird-Programming-Language-Part-1
http://parasail-programming-language.blogspot.no/
http://nimrod-code.org/question.html

http://www.rust-lang.org/
http://claylabs.com/clay/
http://stackoverflow.com/questions/1995113/strangest-language-feature/2004154#2004154